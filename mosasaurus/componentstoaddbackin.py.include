# This should get added back in somewhere, at some point.

def estimateGain(self):
  '''
  Try to estimate the gain of the detectors, from some flat-field images.
  [KLUDGE -- this probably won't work yet in the reorganization.]
  '''

  # try to get the gain from the instrument definition
  self.gains = self.obs.instrument.gains
  if self.gains is None:
    try:
      self.gains = np.loadtxt(self.obs.instrument.workingDirectory + 'gains.txt')
      self.speak("loaded gains from {0}".format(self.obs.instrument.workingDirectory + 'gains.txt'))
      self.speak("   they are:")
      for g in self.gains:
      self.speak("       {0}".format(g))
    except:
      self.speak("estimating gain from noise in multiple flat-field exposures.")
      c = self.ccd#CCD(self.obs, calib=self)

      fi = plt.figure('gain estimation', figsize=(10,4))
      gs =plt.matplotlib.gridspec.GridSpec(1,2, hspace=0, wspace=0, top=0.85)
      ax = []
      ax.append(plt.subplot(gs[0]))
      ax.append(plt.subplot(gs[1], sharey=ax[0], sharex=ax[0]))
      plt.setp(ax[1].get_yticklabels(), visible=False)
      s1, s2 = [], []
      for n in self.obs.nWideFlat:
      c.set(n, 'FlatInADU')
      c.readData()
      c1, c2 = c.amplifiers()
      s1.append(c1)
      s2.append(c2)
      s1 = np.array(s1)
      s2 = np.array(s2)
      readnoises = [10.0, 10.0]
      gains = [1.0, 1.0]
      for i in [0,1]:
      s = [s1, s2][i]
      name = ['c1', 'c2'][i]
      self.speak("")
      self.speak(name)
      self.speak("")
      medianinadu = np.median(s, 0).flatten()
      #noiseinadu = 1.48*np.median(np.abs(s - medianinadu.reshape(1,s.shape[1],s.shape[2])), 0).flatten()
      noiseinadu = np.std(s[1:,:,:]-s[0:-1,:,:], 0).flatten()/np.sqrt(2)
      ok = (medianinadu > 20000)*(medianinadu < 30000)

      def noisemodel(n, gain, readnoise, lamp):
        return np.sqrt(n/gain + readnoise**2 +lamp**2*n**2)

      def deviates(parameters, n=None, noise=None, fjac=None):
        gain = parameters[0]
        readnoise = parameters[1]
        lamp = parameters[2]
        status = 0
        dev = np.log(noise/noisemodel(n,gain,readnoise, lamp))
        #dev = (noise/noisemodel(n, gain,readnoise) - 1)
        noiseondev = mad(dev)
        normalized = dev/noiseondev
        return [status, normalized]



      converged = False
      oldok = ok + 0
      while(converged == False):
        p0 = [1.5, 10.0, 0.000]
        parinfo = [{'value':0., 'fixed':0, 'limited':[0,0], 'limits':[0.,0.]} for n in range(len(p0))]
        parinfo[0]['limits']=[0.1, 10.0]
        parinfo[0]['limited']=[1,1]

        parinfo[1]['limits']=[5.0, 20.0]
        parinfo[1]['limited']=[1,1]
        parinfo[1]['fixed']=1

        parinfo[2]['limits']=[0.0, 0.2]
        parinfo[2]['limited']=[1,1]
        parinfo[2]['fixed']=1

        n = medianinadu
        noise = noiseinadu
        raise NameError("You need to replace mpfit with lmfit!")
        # KLUDGE!!!!! fit = mpfit(deviates, p0, parinfo=parinfo, functkw={'n':n[ok], 'noise':noise[ok]})

        gain = fit.params[0]
        readnoise = fit.params[1]
        lamp = fit.params[2]


        plt.draw()
        ok *= (np.abs(deviates(fit.params, n=n, noise=noise)[-1]) < 5)
        converged = (ok == oldok).all()
        oldok = ok + 0
        self.speak("{0} bad points! converged? {1}".format(np.sum(ok == False), converged))
        self.speak( "   {0}".format(gain))
      gains[i] = gain
      readnoises[i] = readnoise
      ax[i].cla()
      ax[i].plot(n[ok].flatten(),noise[ok].flatten(), marker='o', linewidth=0, alpha=0.1, markeredgewidth=0, color='black', markersize=3)
      ax[i].plot(n[ok == False].flatten(),noise[ok == False].flatten(), marker='o', linewidth=0, alpha=0.02, color='red', markersize=3, markeredgewidth=0)
      bx, by, be= zachopy.oned.binto(x=n, y=noise, binwidth=1000, yuncertainty=None, robust=True, sem=True)
      ax[i].errorbar(bx, by, be, color='orange', linewidth=5, elinewidth=5, capthick=5, alpha=0.5)

      x = np.linspace(0, n[ok].max(), 100)
      ax[i].plot(x, noisemodel(x,gain,readnoise,lamp), color='green', linewidth=5, alpha=1.0)
      ax[i].plot(x, noisemodel(x,1e20,readnoise,0.0), color='green', linestyle='--',linewidth=5, alpha=0.2)
      ax[i].plot(x, noisemodel(x,gain,0.0, 0.0), color='green', linestyle='--',linewidth=5, alpha=0.2)
      ax[i].plot(x, noisemodel(x,1e20, 0.0, lamp), color='green', linestyle='--',linewidth=5, alpha=0.2)

      ax[i].set_title('c{0} \n gain = {1:.2f} \n readnoise = {2:.2f} \n lamp variability = {3:.3f}'.format(i+1, gain, readnoise, lamp))
      ax[i].set_xlim(np.min(n[ok]), np.max(n[ok]))
      ax[i].set_ylim(np.maximum(np.min(noise[ok]), 1.0), np.max(noise[ok]))
      ax[i].set_yscale('log')
      ax[i].set_xscale('log')
      plt.draw()
      #ax[i].plot(n[ok].flatten(), deviates(fit.params, n=n[ok], noise=noise[ok])[-1].flatten(), marker='o', linewidth=0, alpha=0.005, color='black', markersize=3)
      #ax[i].plot(n[ok==False].flatten(), deviates(fit.params, n=n[ok == False], noise=noise[ok == False])[-1].flatten(), marker='o', linewidth=0, alpha=0.1, color='red', markersize=3)
      assert('n' not in self.input('Does this gain estimate seem reasonable? [Y,n]').lower())

      np.savetxt(self.obs.instrument.workingDirectory + 'gains.txt', gains)
      self.gains = gains





  	def createMeanImage(self, n, cosmic=True, visualize=False, imageType=None, maximages=100):
  		'''Take the mean of a series of images, less memory intensive than median.'''

  		### TABS ARE BROKEN IN THIS! ####
  		# we might need to skip some images, if there are too many
  		stride = np.maximum(len(n)/maximages, 1)

  		# create an array of images ### FIX ME ###
  		for i in np.arange(0, len(n), stride):
  			data = self.ccd.readData(n[i], imageType=imageType)

  		# create an array of outliers
  		if cosmic and i == 0:
  			outlier = np.zeros_like(data)
  		if i == 0:
  		count = 1
  		summedImage = data
  		if cosmic:
  		  summedSquaredImage = data**2
  		  stddev = np.sqrt(np.maximum(summedSquaredImage/count - (summedImage/count)**2,1))
  		else:
  		count += 1
  		summedImage += data
  		if cosmic:
  		  summedSquaredImage += data**2
  		  stddev = np.sqrt(np.maximum(summedSquaredImage/count - (summedImage/count)**2,1))
  		  bad = (data - last)/stddev > self.obs.cosmicThreshold
  		  outlier[bad] += (data[bad] - summedImage[bad]/count)
  		last = data
  		self.speak('        ' + self.ccd.name)

  		#self.display.one(summedImage, clobber=(i == 0))
  		if cosmic:
  			#self.display.one((data - summedImage/count)/stddev)
  		if visualize:
  			if i == 0:
  				self.display.one(outlier, clobber=True)
  			else:
  				self.display.ds9update(outlier)
  		if visualize:
  			self.display.one(summedImage)
  			self.display.one(summedImage - outlier)

  		if cosmic:
  			cosmicFilename = self.obs.instrument.workingDirectory + 'cosmics{0}to{1}.fits'.format(np.min(n), np.max(n))
  			writeFitsData(outlier, cosmicFilename)
  		return (summedImage-outlier)/count, stddev
